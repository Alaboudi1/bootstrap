NOTES
------------------------

Basecode Bootstrap Tasks
------------------------

deps to bytecode generation
===========================
- bytecode generation
    data definitions:
        * MOVE: as_string() to element and add as_integer(), as_float(), as_bool()
        * MOVE: symbol_type() to element and add on_symbol_type() for sub-classes
        * compiler::type needs a size and composite_type needs to compute size based on fields
        * compiler::string_type, compiler::array_type need a way to define the composite structure
                within the terp heap

    basic block:
        * emit actual instructions for block behavior
        * local variables/parameters on stack
        * how do blocks link to one another in sequence?
        * @entry_point attribute link up.
            have a single JMP at program_start that is patched with
            designated entry_point function.

- bytecode-to-native:
    * x64 and ARM 64
    * executable and shared libraries only
    * use elfio or LEIF for read/writing obj/executable files

lower priority
===========================
- FIX: line comments within non-block contexts?

- FIX: string, number, boolean literals aren't infix so pre-block comments don't work.

- NOTE: should the compiler support assignment from all statements?
    the_result := if x == 1 {
        return x * 2;
    };

- namespace importing

- type parameter constraints

- multiple return/assignment

- switch

- with

- transaction, commit, rollback

- defer

- for (range)

- while

- break/continue

- union

- struct

- enum

- inline assembly
    #assembly { };

- array_literal

- map_literal

=================================================================

- add unload_shared_library to terp

=================================================================

DONE
----
- implement namespaces in the parser
- implement enumerations in lexer/parser
- implement object/pointer dereference with . operator
- fix precedence of @attribute in parser
- implement defer in parser (executed in reverse order)
- implement with in parser
- ast to internal model
- what is the type of a function?
- remove scope, symbol_table, constant_expression_evaluator, type_inference_engine
- boolean_literal
- procedure subclass for type
- type needs to include type parameters
- require return statement
    * multiple return values
- does binary_operator/unary_operator need element* or just expression*
- base types should be statically defined in program
- comment
- implement block comments /* */ in the lexer/parser
- determine the best way to create new elements
    * maybe follow a similar pattern to ast_builder
- string_literal
- labels
- alias
- cast
- return
- if/else if/else
- FIX: comma token is being gobbled up during infix parsing
- identifier/namespace handling
- create parameter identifiers in block
- review: procedure calls
- type inference
- need to work out how proc types should work
- are the compiler directives bootstrapped using the @directive attribute so
  therefore all implemented in Basecode?
- type inference:
    * add function on program that recursively attempts to finalize
        type inference for identifiers after compile finishes.
- ffi:
    * directive (#foreign) should register procedure_type with vm::terp
    * attribute for library module specific, e.g. @library "libfoo.so", etc.
    * refactor project structure:
        1. core compiler should be shared library
        2. bac command-line tool should be executable target
