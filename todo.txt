NOTES
------------------------
- use elfio for read/writing obj/executable files

- are the compiler directives bootstrapped using the @directive attribute so
  therefore all implemented in Basecode?

Basecode Bootstrap Tasks
------------------------

deps to bytecode generation
===========================
- bytecode generation

- bytecode-to-native:
    x64 and ARM 64

lower priority
===========================
- FIX: line comments within non-block contexts?

- FIX: string, number, boolean literals aren't infix so pre-block comments don't work.

- need to work out how proc types should work

- switch

- with

- transaction, commit, rollback

- view

- defer

- for (range)

- while

- break/continue

- union

- struct

- enum

- array_literal

- how complex should type parameters become in alpha?
    * we need some kind of constraint system

=================================================================

- add unload_shared_library to terp

=================================================================

DONE
----
- implement namespaces in the parser
- implement enumerations in lexer/parser
- implement object/pointer dereference with . operator
- fix precedence of @attribute in parser
- implement defer in parser (executed in reverse order)
- implement with in parser
- ast to internal model
- what is the type of a function?
- remove scope, symbol_table, constant_expression_evaluator, type_inference_engine
- boolean_literal
- procedure subclass for type
- type needs to include type parameters
- require return statement
    * multiple return values
- does binary_operator/unary_operator need element* or just expression*
- base types should be statically defined in program
- comment
- implement block comments /* */ in the lexer/parser
- determine the best way to create new elements
    * maybe follow a similar pattern to ast_builder
- string_literal
- labels
- alias
- cast
- return
- if/else if/else
- FIX: comma token is being gobbled up during infix parsing
- identifier/namespace handling
- create parameter identifiers in block
- review: procedure calls
- type inference

