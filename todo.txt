NOTES
------------------------

TASKS
-----

BYTE CODE EMIT
--------------
- for_element

EVERYTHING ELSE
---------------
- BUG: syntax like: support: print("hello!");
  causes the compiler to end silently.
- REVIEW: type check should enforce scalar/composite type rules.
- REFACTOR: variable to improve how walk_to_root_and_calculate_offset is used.
- proc_expression needs to support overloaded procedures
- BUG: identifiers not found are returning a type inference error instead.
- BUG: enum type creation needs to automatically type fields and increment value.
- BUG: procedure_type, procedure_call need lots of love:
    * return_element
    * procedure_call
    * argument_list
- array_iterator_type
    * index:u64
    * value:T (type of the entry)
    * kind    (first, last, medial)
- map_iterator_type
    * key: K   (type of the key)
    * value: V (type of the value)

DONE
----
- implement namespaces in the parser
- implement enumerations in lexer/parser
- implement object/pointer dereference with . operator
- fix precedence of @attribute in parser
- implement defer in parser (executed in reverse order)
- implement with in parser
- ast to internal model
- what is the type of a function?
- remove scope, symbol_table, constant_expression_evaluator, type_inference_engine
- boolean_literal
- procedure subclass for type
- type needs to include type parameters
- require return statement
    * multiple return values
- does binary_operator/unary_operator need element* or just expression*
- base types should be statically defined in program
- comment
- implement block comments /* */ in the lexer/parser
- determine the best way to create new elements
    * maybe follow a similar pattern to ast_builder
- string_literal
- labels
- alias
- cast
- return
- if/else if/else
- FIX: comma token is being gobbled up during infix parsing
- identifier/namespace handling
- create parameter identifiers in block
- review: procedure calls
- type inference
- need to work out how proc types should work
- are the compiler directives bootstrapped using the @directive attribute so
  therefore all implemented in Basecode?
- type inference:
    * add function on program that recursively attempts to finalize
        type inference for identifiers after compile finishes.
- ffi:
    * directive (#foreign) should register procedure_type with vm::terp
    * attribute for library module specific, e.g. @library "libfoo.so", etc.
    * refactor project structure:
        1. core compiler should be shared library
        2. bac command-line tool should be executable target
- data definitions
    * compiler::type needs a size and composite_type needs to compute size based on fields
    * MOVE: as_string() to element and add as_integer(), as_float(), as_bool()
    * compiler::string_type, compiler::array_type, compiler::any_type should
      inherit from compiler::composite_type and initialize should
      set up their fields.
    * string interning
    * encode constant parameters
- FIX: graph generator is not escaping quotes
- use initializer to handle custom construction of values?
- basic block:
    * emit actual instructions for block behavior
    * local variables/parameters on stack
        * how do blocks link to one another in sequence?
- assignment needs to check is_constant on the rhs to determine if
  a bin_op assignment is needed or if the value can be expressed directly
- assembler:
    * need to build out the api here
- add support to compiler:
    * module(expr) instead of #load
    * namespace importing
        - import <expr> [from <identifier>]
- FIX: now that boost is available, get the executable full path
- FIX: pass executable path into session so paths for module files can be full paths
- FIX: the AST node graph output option shouldn't take a filename now.  the filename should
        be based on the module compiled.  the option should just be a flag.
- NEW: add command line flags that are passed into the compiler as definitions
- consolidate array_constructor and tuple, map, and struct/union/enum into type_literal
- create_type_identifier needs an overhaul:
    * parsing of pointer types and spreads needs to utilize the prefix parsing
    * parsing of array subscripts needs to be folded into the existing subscript parser
    * specification of a dynamic array [] needs to do something other an generate a fake spread_type
    * ast_node_t flags should be removed from array, pointer, spread_type
- proc_call needs to support generic parameters:
    * ast_evaluator should compare parameters to procedure_type and raise
      errors if they don't match.
- intrinsic needs to support generic parameters, e.g. for use with range<T>(..)
- new<type<>> needs to support generic parameters for the embedded type
- BUG: comma precedence needs to be revisited now that everything is vectoring through proc_call_infix_parser.
- byte code emit for: switch, case, fallthrough
