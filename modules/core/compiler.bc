// ----------------------------------------------------------------------------
//
// Basecode Compiler
// Copyright (C) 2018 Jeff Panici
// All rights reserved.
//
// This software source file is licensed under the terms of MIT license.
// For details, please read the LICENSE file.
//
// ----------------------------------------------------------------------------

public :: ns {
    @library "basecode";
    #foreign print :: proc(format: ^u8, ...values: any) @alias "fmt_print";

    min :: proc(a: u32, b: u32): u32 {
        if a < b {
            return a;
        } else {
            return b;
        };
    };

    max :: proc(a: u32, b: u32): u32 {
        if a > b {
            return a;
        } else {
            return b;
        };
    };

    next_power_of_two :: proc(n: u32): u32 {
        n -:= 1;
        n |:= n shr 1;
        n |:= n shr 2;
        n |:= n shr 4;
        n |:= n shr 8;
        n |:= n shr 16;
        n +:= 1;
        return n;
    };

    assign_string :: proc(str: ^string, lit: ^u8, len: u32) {
        str.length := len;
        str.capacity := next_power_of_two(len + 1);
        str.data := alloc(cast<u64>(str.capacity));
        fill(str.data, 0, cast<u64>(str.capacity));
        copy(str.data, lit, cast<u64>(len));
    };

    traps :: ns {
        putc :: $01;
        getc :: $02;
    };

    putc :: proc(char: rune, f: u32 := 1) {
        #assembly {{
            .ilocal f
            .ilocal char

            load.dw     f, fp, local(f)
            load.dw     char, fp, local(char)
            push.dw     char
            push.dw     f
            trap.b      module(traps::putc)
        }};
    };

    getc :: proc(f: u32 := 1): rune {
        result: rune;
        #assembly {{
            .ilocal f

            load.dw     f, fp, local(f)
            push.dw     f
            trap.b      module(traps::getc)
            pop.dw      f
            store.dw    fp, f, local(result)
        }};
        return result;
    };
};
