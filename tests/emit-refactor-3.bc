core :: module("core");

fib :: proc(n: u32 := 10): u32 {
    core::print("n := %d\n", n);
    if n < 2 {
        return n;
    } else {
        return fib((n - 1) + fib(n - 2));
    };
};

test :: proc(): u32 {
    foo: u32;
    bar: u8 := 2;

    foo := cast<u32>(3);
    foo *:= cast<u32>(bar) + 4;

    ptr_to_foo := address_of(foo);

    core::print("foo := %d\n", foo);
    core::print("ptr_to_foo := %016llX\n", ptr_to_foo);

    return foo;
};

#run {
    flag: bool;

    @no_fold;
    flag := 3 > 2 || 1 == 1;

    core::print("flag := %d\n", flag);

    pow_of_2: u32 := core::next_power_of_two(cast<u32>(313));
    core::print("\npow_of_2 := %d\n", pow_of_2);

    result := test();
    core::assert(result == 18, "expected result == 18");
    core::print("\nresult := %d\n", result);

    f := fib();
    core::assert(f == 0, "expected f == 0");
    core::print("\nf := %d\n", f);
};