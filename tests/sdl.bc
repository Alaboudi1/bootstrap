core :: module("../modules/core");

SDL :: ns {
    Color :: struct {
        r: u8;
        g: u8;
        b: u8;
        a: u8;
    };

    Palette :: struct {
        ncolors: s32;
        colors: ^Color;
        version: u32;
        refcount: s32;
    };

    PixelFormat :: struct {
        format: u32;
        palette: ^Palette;
        bits_per_pixel: u8;
        bytes_per_pixel: u8;
        padding: u16;
        rmask: u32;
        gmask: u32;
        bmask: u32;
        amask: u32;
        rloss: u8;
        gloss: u8;
        bloss: u8;
        aloss: u8;
        rshift: u8;
        gshift: u8;
        bshift: u8;
        ashift: u8;
        refcount : s32;
        next: ^PixelFormat;
    };

    BlitMap :: struct {};

    Point   :: struct {
        x: s32;
        y: s32;
    };

    Rect    :: struct {
        x: s32;
        y: s32;
        w: s32;
        h: s32;
    };

    Window  :: struct {};

    Surface :: struct {
        flags: u32;
        format: ^PixelFormat;
        w: s32;
        h: s32;
        pitch: s32;
        pixels: ^u8;
        userdata: ^u8;
        locked: s32;
        lock_data: ^u8;
        clip_rect: Rect;
        map: ^BlitMap;
        refcount: s32;
    };

    INIT_TIMER          :: $00000001;
    INIT_AUDIO          :: $00000010;
    INIT_VIDEO          :: $00000020;
    INIT_JOYSTICK       :: $00000200;
    INIT_HAPTIC         :: $00001000;
    INIT_GAMECONTROLLER :: $00002000;
    INIT_EVENTS         :: $00004000;
    INIT_NOPARACHUTE    :: $00100000;
    INIT_EVERYTHING     :: INIT_TIMER
                           | INIT_AUDIO
                           | INIT_VIDEO
                           | INIT_EVENTS
                           | INIT_JOYSTICK
                           | INIT_HAPTIC
                           | INIT_GAMECONTROLLER;

    WINDOWPOS_UNDEFINED_MASK :: $1FFF0000;
    WINDOWPOS_UNDEFINED      :: WINDOWPOS_UNDEFINED_MASK;

    WINDOWPOS_CENTERED_MASK  :: $2FFF0000;
    WINDOWPOS_CENTERED       :: WINDOWPOS_CENTERED_MASK;

    FULLSCREEN         :: $00000001;
    OPENGL             :: $00000002;
    SHOWN              :: $00000004;
    HIDDEN             :: $00000008;
    BORDERLESS         :: $00000010;
    RESIZABLE          :: $00000020;
    MINIMIZED          :: $00000040;
    MAXIMIZED          :: $00000080;
    INPUT_GRABBED      :: $00000100;
    INPUT_FOCUS        :: $00000200;
    MOUSE_FOCUS        :: $00000400;
    FULLSCREEN_DESKTOP :: FULLSCREEN | $00001000;
    FOREIGN            :: $00000800;
    ALLOW_HIGHDPI      :: $00002000;
    MOUSE_CAPTURE      :: $00004000;
    ALWAYS_ON_TOP      :: $00008000;
    SKIP_TASKBAR       :: $00010000;
    UTILITY            :: $00020000;
    TOOLTIP            :: $00040000;
    POPUP_MENU         :: $00080000;
    VULKAN             :: $10000000;

    @library "SDL2";
    #foreign {
        Quit                :: proc() @alias "SDL_Quit";
        Delay               :: proc(ms: u32) @alias "SDL_Delay";
        Init                :: proc(flags: u32): s32 @alias "SDL_Init";
        DestroyWindow       :: proc(window: ^Window) @alias "SDL_DestroyWindow";
        UpdateWindowSurface :: proc(window: ^Window): s32 @alias "SDL_UpdateWindowSurface";
        GetWindowSurface    :: proc(window: ^Window): ^Surface @alias "SDL_GetWindowSurface";
        FillRect            :: proc(surface: ^Surface, rect: ^Rect, color: u32): s32 @alias "SDL_FillRect";
        CreateWindow        :: proc(title: ^u8, x: s32, y: s32, w: s32, h: s32, flags: u32): ^Window @alias "SDL_CreateWindow";
    } @parent_scope;
};

#run {
    assert(SDL::Init(SDL::INIT_VIDEO) >= 0, "SDL could not be initialized!");
    
    window := SDL::CreateWindow(
        "Test Window", 
        SDL::WINDOWPOS_CENTERED,
        SDL::WINDOWPOS_CENTERED,
        1280, 
        1024, 
        SDL::OPENGL | SDL::SHOWN);
    assert(window != nil, "window not initialized!");
    rect: SDL::Rect;
    with rect {
        .x := 0;
        .y := 0;
        .w := 1280;
        .h := 1024;
    };

    surface := SDL::GetWindowSurface(window);

    SDL::FillRect(surface, nil, $FFFFFFFF);
    SDL::UpdateWindowSurface(window);

    SDL::Delay(10000);

    SDL::DestroyWindow(window);

    SDL::Quit();
};
