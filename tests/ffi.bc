// ----------------------------------------------------------------------------
//
// Basecode Bootstrap Compiler
// Copyright (C) 2018 Jeff Panici
// All rights reserved.
//
// This software source file is licensed under the terms of MIT license.
// For details, please read the LICENSE file.
//
// ----------------------------------------------------------------------------

core :: module("../modules/core");

@library "basecode";
#foreign str_test_ptr :: proc(str: ^string);

@library "basecode";
#foreign complex_test_ptr :: proc(e: ^entity);

pass_by_value :: proc(msg: string) {
    print("msg.length := %d\n", msg.length);
    print("msg.capacity := %d\n", msg.capacity);
    print("msg.data := %s\n", msg.data);
};

flags_t :: tuple(foo := false, bar := false, bing := true, bong := true);

tuple_by_value :: proc(flags: flags_t) {
    print("flags.foo  := %hhu\n", flags.foo);
    print("flags.bar  := %hhu\n", flags.bar);
    print("flags.bing := %hhu\n", flags.bing);
    print("flags.bong := %hhu\n", flags.bong);
};

#run {
    print("%s: %d, %f\n", "integer and float", 22, 3.5);

    temp: string := "hello world!";

    // ffi
    str_test_ptr(address_of(temp));

    // native
    my_flags: flags_t;
    my_flags.foo := true;
    my_flags.bing := false;
    tuple_by_value(my_flags);
    pass_by_value(temp);
};

vector3 :: struct {
    x: f32;
    y: f32;
    z: f32;
};

player :: struct {
    name:  string;
    lives: u8  := 3;
    hp:    u16 := 15000;
};

entity :: struct {
    name: string;
    pos:  vector3;
    data: ^player;
};

#run {
    print("next_power_of_two          := %d\n", next_power_of_two(33));
    print("max(32, next_power_of_two) := %d\n", max(32, next_power_of_two(33)));

    jeff: player;
    with jeff {
        assign_string(address_of(.name), "jeff", 4);
        print(".name.length   := %d\n", .name.length);
        print(".name.capacity := %d\n", .name.capacity);
        print(".name.data     := %s\n", .name.data);
    };

    jeff_entity: entity;
    with jeff_entity {
        assign_string(address_of(.name), "entity: jeff", 12);
        print(".name.length   := %d\n", .name.length);
        print(".name.capacity := %d\n", .name.capacity);
        print(".name.data     := %s\n", .name.data);

        .pos.x := 1.0;
        .pos.y := 1.0;
        .pos.z := 1.0;
        .data := address_of(jeff);
    };

    complex_test_ptr(address_of(jeff_entity));
};