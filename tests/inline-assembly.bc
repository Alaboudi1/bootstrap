support :: module("support/module.bc");

foo := 128;
foo := foo * 2;

#assembly {{
    move.qw i0, foo
    load.b  i1, i0
    move.b  i2, #$0a
    sub.b   i3, i1, i2
    store.b i0, i3
}};

foo := (foo - 16) shr 2;

// XXX: multi-assignment is broken because
//      of a precedence issue between comma and assignment
//j, k := cast<u16>(4), 8;
//j, k := k, cast<u8>(j);

bar: u64;
bar := 512;

constant_fold_at_assignment := size_of(bar);

temp: u32;
temp := size_of(bar);

'get_a_type:
temp_type_info: ^type := type_of(temp);
huh := temp_type_info^;

support::print("address_of(temp) := $%08x\n\n", address_of(temp));

support::print("foo := %hhu\n\n", foo);

support::print("size_of(foo)     := %d\n",   size_of(foo));
support::print("align_of(foo)    := %d\n\n", align_of(foo));

support::print("size_of(u16)     := %d\n",   size_of(u16));
support::print("align_of(u16)    := %d\n\n", align_of(u16));

support::print("size_of(u32)     := %d\n",   size_of(u32));
support::print("align_of(u32)    := %d\n\n", align_of(u32));

support::print("size_of(bar)     := %d\n",   size_of(bar));
support::print("align_of(bar)    := %d\n\n", align_of(bar));

support::print("size_of(string)  := %d\n",   size_of(string));
support::print("align_of(string) := %d\n\n", align_of(string));

// alloc & free block of memory
'allocate_memory:
addr: ^u8 := alloc(size_of(u16) * 4096);
support::print("addr := $%08x\n", addr);
free(addr);