core :: module("core");

#run {
    foo: u16 := 128;
    foo := foo * 2;

    #assembly {{
        sub.w   foo, foo, #$0a
    }};

    foo := (foo - 16) shr 2;

    core::assert(foo == 57, "foo expected 57");

    j, k := cast<u16>(4), 8;
    j, k := cast<u16>(k), cast<u8>(j);

    bar: u64;
    bar := cast<u64>(512);

    constant_fold_at_assignment := size_of(bar);

    temp: u32;
    temp := size_of(bar);

    'get_a_type:
    temp_type_info: ^type := type_of(temp);
    huh := temp_type_info^;

    core::print("huh.name.data := %s\n", huh.name.data);

    core::print("address_of(temp) := $%08x\n\n", address_of(temp));

    core::print("foo := %hhu\n\n", foo);

    core::print("size_of(foo)     := %d\n",   size_of(foo));
    core::print("align_of(foo)    := %d\n\n", align_of(foo));

    core::print("size_of(u16)     := %d\n",   size_of(u16));
    core::print("align_of(u16)    := %d\n\n", align_of(u16));

    core::print("size_of(u32)     := %d\n",   size_of(u32));
    core::print("align_of(u32)    := %d\n\n", align_of(u32));

    core::print("size_of(bar)     := %d\n",   size_of(bar));
    core::print("align_of(bar)    := %d\n\n", align_of(bar));

    core::print("size_of(string)  := %d\n",   size_of(string));
    core::print("align_of(string) := %d\n\n", align_of(string));

    // alloc & free block of memory
    'allocate_memory:
    addr: ^u8 := alloc(cast<u64>(size_of(u16) * 4096));
    core::print("addr := $%016X\n", addr);
    free(addr);

    core::putc('H');
    core::putc('\n');

    // N.B. be careful, this call blocks
    //r := core::getc();
    //core::putc(r);
};