core :: module("core");

vector3 :: struct {
    x, y, z: f32 := 1.0;
};

player :: struct {
    pos: ^vector3;
    dir: ^vector3;
};

test :: proc() {
    // storage
    a: vector3;

    // ptr
    p: ^vector3 := address_of(a);
    p.x := -3.5;
    p.y := 2.5;
    p.z := -16.1542;

    core::print("p.x := %f\n", p.x);
    core::print("p.y := %f\n", p.y);
    core::print("p.z := %f\n", p.z);

    foo := p^;

    core::print("foo.x := %f\n", foo.x);
    core::print("foo.y := %f\n", foo.y);
    core::print("foo.z := %f\n", foo.z);

    text := "this is a test!";
    core::print("first char := %c\n", text^);
};

test1 :: proc() {
    p: player;
    p.pos := alloc(size_of(vector3));
    p.dir := alloc(size_of(vector3));

    defer free(p.pos);
    defer free(p.dir);

    p_ptr: ^player := address_of(p);
    p_ptr.pos.x := -3.5;
    p_ptr.pos.y := -4.5;
    p_ptr.pos.z := -5.5;

    core::print("p_ptr.pos.x := %f\n", p_ptr.pos.x);
    core::print("p_ptr.pos.y := %f\n", p_ptr.pos.y);
    core::print("p_ptr.pos.z := %f\n", p_ptr.pos.z);
};

#run test1();