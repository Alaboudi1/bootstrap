core :: module("core");

foo: s32;

foo := 2 * 6;
{
    bar: s32;
    bar := foo * 10;
    core::print("bar := %lld\n", bar);
};

core::print("foo := %d\n", foo);

//vector3 :: struct {
//    x, y, z: f32 := 1.0;
//};
//
//test :: proc() {
//    v: vector3;
//    v.x := 4.0;
//    v.y := -5.0;
//    v.z := -16.455;
//
//    core::print("v.x := %f\n", v.x);
//    core::print("v.y := %f\n", v.y);
//    core::print("v.z := %f\n", v.z);
//};
//
//#run test();

//_alloc :: #inline proc(size: u64): ptr: ^u0 {
//    #assembly {{
//        alloc.b ptr, size
//    }};
//};
//
//_free :: #inline proc(ptr: ^u0) {
//    #assembly {{
//        free.qw ptr
//    }};
//};
//
//mem := _alloc(64);
//core::print("mem := $%016llX\n", mem);
//_free(mem);

//test :: proc(a, b: s32): s32, s32 {
//    return a*b, a/b;
//};
//
//#run {
//    product, dividend := test(32, 16);
//    core::print("product := %d\n", product);
//    core::print("dividend := %d\n", dividend);
//};