// ----------------------------------------------------------------------------
//
// Basecode Bootstrap Compiler
// Copyright (C) 2018 Jeff Panici
// All rights reserved.
//
// This software source file is licensed under the terms of MIT license.
// For details, please read the LICENSE.md file.
//
// ----------------------------------------------------------------------------

@entry_point main;

#foreign
    @library "fmt";
    @calling_convention c_default;
    format := proc(fmt:string, values: ...any);

// attribute should consume multiple arguments within a single statement
// AND
//
// comments should be allowed anywhere, need an infix comment parser
//                             ^
//                             | parser isn't supported to see this as the any keyword

#foreign {
    @library "fmt";
    @alias "format";
    @calling_convention win_x86_fast;
    format_win_x86_fast := proc(fmt:string, values: ...any);

    sqrt := proc(value:f64):f64;
    printf := proc(fmt:string, values:...any);
};


alpha::compiler::examples := ns {
    something::nested := ns {
        types := enum {
            burt := 1;
            ernie;
            maria;
            grover;
        };
    };

    vector2 := struct {
        x:f64 := 0;
        y:f64 := 0;

        new := proc(x:f64, y:f64):vector2 {
            vec:vector2;
            vec.x := x;
            vec.y := y;
            return vec;
        };

        length := proc(self:vector2):f64 {
            return sqrt(self.x * self.x + self.y * self.y);
        };

        normalize := proc(self:*vector2):vector2 {
            vec:vector2;

            length := self.length();
            if length != 0 {
                vec.x := self.x / length;
                vec.y := self.y / length;
            };

            return vec;
        };
    };

    main := proc():u32 {
        vec1 := vector2::new(5, 5);
        printf("vec1_length := %f\n", vec1_length := vec1.length());
        printf("vec1_normalized := %f\n", vec1_normalized := vec1.normalize());

        vec2_list:[] vector2;
        fixed_list:[100] string;

        max_list_length := proc():u32 {
            return 500;
        };

        computed_list:[max_list_length()] vector2;

        return 0;
    };
};