@library "alpha-core";
#foreign print := proc(format: string, values: ...any) @alias "fmt_print";

foo := 128;
foo := foo * 2;

#assembly {{
    move.qw i0, foo
    move.b  i1, #$0a
    sub.b   i2, i0, i1
    store.b i0, i2
}};

foo := (foo - 16) shr 2;

bar: u64;
bar := 512;

constant_fold_at_assignment := size_of(bar);

temp: u32;
temp := size_of(bar);

print("foo := %hhu\n", foo);
#assembly {{ move.qw i0, #$0 }};
print("size_of(foo) := %d\n", size_of(foo));
print("size_of(u16) := %d\n", size_of(u16));
print("size_of(u32) := %d\n", size_of(u32));

// XXX: only applies FFI: the compiler needs to zero extend some of these
#assembly {{ move.qw i0, #$0 }};
print("size_of(bar) := %d\n", size_of(bar));

#assembly {{ move.qw i0, #$0 }};
print("size_of(string) := %d\n", size_of(string));

// alloc & free block of memory
addr: u64 := alloc(4096);
print("addr := %ld\n", addr);
free(addr);

