// Issues
//

// 0. how to encode the spread operator?
//

// 1. block filtering in program::on_emit isn't strong enough.
//    a. blocks that belong to procedures should be flagged as such

// 2. types
//    a. type metadata needs to be emitted by the compiler
//    b. type initializers & finalizers
//    c. type_of(x)
//    d. align_of(x)
//    e. size_of(x)

// 3. finish constant expression folding

// 4. rework constant assignment syntax
//      x :: "foo";

// 5. array initializer lists
// 6. dictionary initializer lists
// 7. tuples
// 8. structs/unions/enums
//    a. dot defer syntax
// 9. with syntax for composite types
// 10. context implicit

// 11. procedure call verification against type
//     a. named, unordered arguments, e.g. print(a, 2, 10, 3, format := "a = %hhu\n");
//     b. procedure stack frame
//     c. return fixes

// 12. #if/#elseif/#else
// 13. assert

// 14. fix multiple assignment/destructuring

// 15. assembler label names need to be fully qualified

// 17. cast operator & rules
//     a. transmute<type>()

@library "libalpha-core.dylib";
#foreign print := proc(format: string, values: ...any) @alias "fmt_print";

///////////////////////////////////////////////////////////////////////////////
// bool
// â‰ 

// uninitialized
bool_true_u: bool;
bool_true_u := true;

bool_false_u: bool;
bool_false_u := false;

// initialized
bool_true_i:  bool := true;
bool_false_i: bool := false;

///////////////////////////////////////////////////////////////////////////////
// u8

// uninitialized
u8_min_u: u8;
u8_min_u := 0;
u8_min_u := $0;
u8_min_u := @0;
u8_min_u := %0000_0000;

u8_max_u: u8;
u8_max_u := 255;
u8_max_u := $ff;
u8_max_u := @377;
u8_max_u := %1111_1111;

s8_min_u: s8;
s8_min_u := -128;
s8_min_u := $80;
s8_min_u := @200;
s8_min_u := %1000_0000;

s8_max_u: s8;
s8_max_u := 127;
s8_max_u := $7f;
s8_max_u := @177;
s8_max_u := %0111_1111;

// initialized
u8_min_i1: u8 := 0;
u8_min_i2: u8 := $0;
u8_min_i3: u8 := @0;
u8_min_i4: u8 := %0000_0000;

u8_max_i1: u8 := 255;
u8_max_i2: u8 := $ff;
u8_max_i3: u8 := @377;
u8_max_i4: u8 := %1111_1111;

s8_min_i1: s8 := -128;
s8_min_i2: s8 := $80;
s8_min_i3: s8 := $200;
s8_min_i4: s8 := %1000_0000;

s8_max_i1: s8 := 127;
s8_max_i2: s8 := $7f;
s8_max_i3: s8 := @177;
s8_max_i4: s8 := %0111_1111;

///////////////////////////////////////////////////////////////////////////////
// u16

// uninitialized
u16_min_u: u16;
u16_min_u := 0;
u16_min_u := $0;
u16_min_u := @0;
u16_min_u := %0000_0000_0000_0000;

u16_max_u: u16;
u16_max_u := 65535;
u16_max_u := $ffff;
u16_max_u := @177777;
u16_max_u := %1111_1111_1111_1111;

s16_min_u: s16;
s16_min_u := -32768;
s16_min_u := $8000;
s16_min_u := @100000;
s16_min_u := %1000_0000_0000_0000;

s16_max_u: s16;
s16_max_u := 32767;
s16_max_u := $7fff;
s16_max_u := @77777;
s16_max_u := %0111_1111_1111_1111;

// initialized
u16_min_i1: u16 := 0;
u16_min_i2: u16 := $0;
u16_min_i3: u16 := @0;
u16_min_i4: u16 := %0000_0000_0000_0000;

u16_max_i1: u16 := 65535;
u16_max_i2: u16 := $ffff;
u16_max_i3: u16 := @177777;
u16_max_i4: u16 := %1111_1111_1111_1111;

s16_min_i1: s16 := -32768;
s16_min_i2: s16 := $8000;
s16_min_i3: s16 := @100000;
s16_min_i4: s16 := %1000_0000_0000_0000;

s16_max_i1: s16 := 32767;
s16_max_i2: s16 := $7fff;
s16_max_i3: s16 := @77777;
s16_max_i4: s16 := %0111_1111_1111_1111;

///////////////////////////////////////////////////////////////////////////////
// u32

// uninitialized
unsigned_dword_min: u32;
unsigned_dword_min := 0;

unsigned_dword_max: u32;
unsigned_dword_max := 4_294_967_295;

signed_dword_min: s32;
signed_dword_min := -2_147_483_646;

signed_dword_max: s32;
signed_dword_max := 2_147_483_647;

// initialized
unsigned_dword_init_min: u32 := 0;
unsigned_dword_init_max: u32 := 4_294_967_295;
signed_dword_init_min:   s32 := -2_147_483_646;
signed_dword_init_max:   s32 := 2_147_483_647;

///////////////////////////////////////////////////////////////////////////////
// u64

// uninitialized
unsigned_qword_min: u64;
unsigned_qword_min := 0;

unsigned_qword_max: u64;
unsigned_qword_max := 18_446_744_073_709_551_615;

signed_qword_min: s64;
signed_qword_min := -9_223_372_036_854_775_806;

signed_qword_max: s64;
signed_qword_max := 9_223_372_036_854_775_807;

// initialized
unsigned_qword_init_min: u64 := 0;
unsigned_qword_init_max: u64 := 18_446_744_073_709_551_615;
signed_qword_init_min:   s64 := -9_223_372_036_854_775_806;
signed_qword_init_max:   s64 := 9_223_372_036_854_775_807;
